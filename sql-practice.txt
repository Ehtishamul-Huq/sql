create database sql_assignment;
use sql_assignment;

-- 1 Write a query to display the columns in a specific order, such as order date, salesman ID, order number, and purchase amount for all orders.
create table sales_order(
ord_no int,
purch_amt float,
ord_date date,
customer_id int,
salesman_id int);
insert into sales_order values(7001,150.5,'2012-10-05',3005,5002);
insert into sales_order values(7009,270.65,'2012-09-10',3001,5005);
insert into sales_order values(7002,65.26,'2012-10-05',3002,5001);
insert into sales_order values(70004,110.5,'2012-08-17',3009,5003);
insert into sales_order values(70007,948.5,'2012-09-10',3005,5002);
insert into sales_order values(70005,2400.6,'2012-07-27',3007,5001);
insert into sales_order values(70008,5760,'2012-09-10',3002,5001);
insert into sales_order values(70010,1983.43,'2012-10-10',3004,5006);
insert into sales_order values(70003,2480.4,'2012-10-10',3009,5003);
insert into sales_order values(70012,250.45,'2012-06-27',3008,5002);
insert into sales_order values(70011,75.29,'2012-08-17',3003,5007);
insert into sales_order values(70013,3045.6,'2012-04-25',3002,5001);
select ord_date,salesman_id,ord_no,purch_amt from sales_order;

-- 2 From the following table, write a SQL query to locate salespeople who live in the city of 'Paris'. Return salesperson's name, city.
create table sales_man(
salesman_id int,
name varchar(50),
city varchar(50),
commission float
);
insert into sales_man values(5001,'James Hoog','New York',0.15);
insert into sales_man values(5002,'Nail Knite','Paris',0.13);
insert into sales_man values(5005,'Pit Alex','London',0.11);
insert into sales_man values(5006,'Mc Lyon','Paris',0.14);
insert into sales_man values(5007,'Paul Adam','Rome',0.13);
insert into sales_man values(5003,'Lauson Hen','San Jose',0.12);
select name,city from sales_man where city = 'Paris';

-- 3 From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to Rs.600. 
-- Begin and end values are included. Return pro_id, pro_name, pro_price, and pro_com.
create table products(
pro_id int,
pro_name varchar(50),
pro_price float,
pro_com int);
insert into products values(101,'Motherboard',3200.00,15);
insert into products values(102,'Keyboard',450.00,16);
insert into products values(103,'ZIP drive',250.00,14);
insert into products values(104,'Speaker',550.00,16);
insert into products values(105,'Monitor',5000.00,11);
insert into products values(106,'DVD drive',900.00,12);
insert into products values(107,'CD drive',450.00,16);
insert into products values(108,'Printer',2600.00,13);
insert into products values(109,'Refill cartridge',350.00,13);
insert into products values(110,'Mouse',250.00,12);
select * from products where pro_price between 200 and 600;

-- 4 From the following table, write a SQL query to find the items whose prices are higher than or equal to $550. Order the result by product price in descending, 
-- then product name in ascending.
select pro_name,
	   pro_price
from   products
where  pro_price >= 550
order by pro_price desc;

select pro_name,
	   pro_price
from   products
where  pro_price >= 550
order by pro_name;

-- 5 From the following table, write a SQL query to find details of all orders excluding those with ord_date equal to '2012-09-10' and salesman_id higher than 5005 or
-- purch_amt greater than 1000.Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select * from sales_order
where ord_date <> '2012-09-10'
and (salesman_id < 5005
or purch_amt < 1000);

-- 6 Create the table world with your schema and find the below queries
create table world(
name varchar(50),
continent varchar(50),
area int,
population bigint,
gdp bigint);
insert into world values('Afghanistan', 'Asia', 652230, 25500100, 20343000000);
insert into world values('Albania', 'Europe', 28748, 2831741, 12960000000);
insert into world values('Algeria', 'Africa', 2381741, 37100000, 188681000000);
insert into world values('Andorra', 'Europe', 468, 78115, 3712000000);
insert into world values('Angola', 'Africa', 1246700, 20609294, 100990000000);
insert into world values('Dominican Republic', 'Caribbean', 48671, 9445281, 58898000000);
insert into world values('China', 'Asia', 9596961, 1365370000, 8358400000000);
insert into world values('Colombia', 'South America', 1141748, 47662000, 369813000000);
insert into world values('Comoros', 'Africa', 1862, 743798, 616000000);
insert into world values('Denmark', 'Europe', 43094, 5634437, 314889000000);
insert into world values('Djibouti', 'Africa', 23200, 886000, 1361000000);
insert into world values('Dominica', 'Caribbean', 751, 71293, 499000000);
-- 1 Write a query to fetch which country has the highest population?
select name as country, max(population) as highest_population from world;

-- 2.write a query to fetch the name of the country which has the least gdp?
select name as least_gdp_country from world order by gdp limit 1;

-- 3. Write a query to fetch the name of the country which ends with letter C?
select name from world where name like '%C';

-- 4.write a query to fetch the name of the country which starts with letter D?
select name from world where name like 'D%';

-- 5.write query to fetch which continent has highest gdp?
select continent as highest_gdp_country from world group by highest_gdp_country order by sum(gdp) desc limit 1;

-- 6.Give the total GDP of Africa?
select sum(gdp) from world where continent = 'Africa';

-- 7.write a query to fetch the total population for each continent?
select continent, sum(population) as total_population from world group by continent;

-- 8. For each relevant continent show the number of countries that has a population of at least 200000000?
select continent, count(name) as total_countries, population from world where population > 200000000 group by continent;

--- 7
create table students(student_id int,
student_name varchar(60) not null,
city varchar(60) not null,
primary key(student_id));

create table course(student_id int,
course_name varchar(60) not null,
Marks int not null,
primary key(student_id),
foreign key(student_id) references students(student_id));

insert into students values(200,'John Doe','Delhi'),
(210,'John Doe','Delhi'),
(220,'Moon ethan','Rajasthan'),
(230,'Jessie','Bangalore'),
(240,'Benbrook','Bihar'),
(250,'Ethan','Bihar'),
(260,'Johnnie','Bangalore'),
(270,'Goh','Delhi'),(380,'John Doe','Delhi'),
(280,'Pavi','Delhi'),
(290,'Sanvi','Rajasthan'),
(300,'Navyaa','Bangalore'),
(310,'Ankul','Bihar'),
(311,'Hitanshi','Bihar'),
(312,'Aayush','Bangalore'),
(313,'Rian','Delhi');

create table course(student_id int,
course_name varchar(60) not null,
Marks int not null,
primary key(student_id),
foreign key(student_id) references students(student_id));

insert into course values(200,'Datascience',75),
(210,'Datascience',75),
(220,'Dataanalyst',80),
(230,'Dataanalyst',80),
(240,'Dataanalyst',84),
(250,'Dataanalyst',50),
(260,'Datascience',80),
(270,'Datascience',99),
(380,'Datascience',45),
(280,'Datascience',78),
(290,'Dataanalyst',78),
(300,'Computer vision',90),
(310,'Computer vision',90),
(311,'Computer vision',75),
(312,'Computer vision',39),
(313,'Computer vision',45);

-- q.1 write a query to fetch the names of the students having maximum marks in each course?
select tmp.* from (select student_name,course_name,marks, dense_rank() over(partition by course_name order by marks desc) as 'rank' from course c inner join students s on c.student_id = s.student_id) tmp where tmp.rank = 1;

-- q.2 write a query to fetch the names of the students having 3th highest marks from each course?
select tmp.* from (select student_name,course_name,marks, dense_rank() over(partition by course_name order by marks desc) as 'Rank' from course c inner join students s on c.student_id = s.student_id) tmp where tmp.Rank = 3;

-- q.3) write a query to fetch the names of the students having minimum marks in each course?
select tmp.* from (select student_name,course_name,marks, dense_rank() over(partition by course_name order by marks) as 'Rank' from course c inner join students s on c.student_id = s.student_id) tmp where tmp.Rank = 1;

-- q.4) write a query to fetch the names of the students having 4th least marks from each course?
select tmp.* from (select student_name,course_name,marks, dense_rank() over(partition by course_name order by marks) as 'Rank' from course c inner join students s on c.student_id = s.student_id) tmp where tmp.Rank = 4;

-- q.5 write a query to fetch the city name of the students who have 2nd highest marks?
select tmp.* from (select student_name,city,course_name,marks, dense_rank() over(partition by course_name order by marks desc) as 'Rank' from course c inner join students s on c.student_id = s.student_id) tmp where tmp.Rank = 2;

-- q.6) write a query to fetch the count of each city?
select city, count(city) as total_count from students s inner join course c on c.student_id = s.student_id group by city;

-- q.7) write a query to fetch the names of the students who are from the same city?
select city, group_concat(student_name) as 'Student Names' from students group by city;

-- q8.write a query to fetch the names of students starting with 'A'?
select student_id, student_name from students where student_name like 'A%';

-- q9.write a query to fetch the count of students from each city?
select city,count(student_name) as total_strength from students group by city;

--- 8
create table players(
player_id int,
device_id int,
event_date date,
games_played int,
primary key (player_id,event_date)
);
insert into players values(1,2,'2016-03-01',5);
insert into players values(1,2,'2016-05-02',6);
insert into players values(2,3,'2017-06-25',1);
insert into players values(3,1,'2016-03-02',0);
insert into players values(3,4,'2018-07-03',5);
select * from players;

-- Write an SQL query to report the first login date for each player. Return the result table in any order.
select player_id,min(event_date) as first_login from players group by player_id;

--- 9)
create table products(
product_id int,
low_fats enum('Y', 'N'),
recyclable enum('Y', 'N'),
primary key (product_id)
);
insert into products values(0,'Y','N');
insert into products values(1,'Y','Y');
insert into products values(2,'N','Y');
insert into products values(3,'Y','Y');
insert into products values(4,'N','N');

-- Write an SQL query to find the ids of products that are both low fat and recyclable. Return the result table in any order.
select product_id from products where low_fats = 'Y' and recyclable = 'Y';

--- 10)
select * from world;
-- 1. Select the statement that shows the sum of population of all countries in each continent.
select continent, sum(population) as total_population from world group by continent;

-- 2 Select the statement that shows the number of countries with population smaller than 150000
select count(name) as count from world where population < 150000;

-- 3 Select the statement that shows the average population of 'Poland', 'Germany' and 'Denmark'
select avg(population) as average_population from world where name in ('Afghanistan','Germany','Denmark');

-- 4 Select the statement that shows the name and population density of the country with the largest population
select name, max(population) as largest_population from world;
